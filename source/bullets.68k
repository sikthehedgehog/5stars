;****************************************************************************
; 5 Stars
; Copyright 2011-2012 Javier Degirolmo
;
; This file is part of 5 Stars.
;
; 5 Stars is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; 5 Stars is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with 5 Stars.  If not, see <http://www.gnu.org/licenses/>.
;****************************************************************************

;****************************************************************************
; RunStaticBullet
; Game logic for bullets that stay in place (well, scrolling...)
;----------------------------------------------------------------------------
; input a0.l ... Object data
; input a3.l ... Player data
; breaks: all but a0-a3
;****************************************************************************

RunStaticBullet:
    move.l  ObjectX(a0), d0             ; Move to the left like most enemies
    sub.l   (RAM_AnimSpeed2x), d0
    move.l  d0, ObjectX(a0)
    
    cmp.l   #-4<<16, d0                 ; Are we off-screen?
    bgt.s   @NotOffScreen
    bra     SuicideObject
@NotOffScreen:
    
    bsr     DoBulletStuff               ; Do common bullet stuff
    rts                                 ; End of subroutine

;****************************************************************************
; DoBulletStuff
; Common stuff done by all bullets
;----------------------------------------------------------------------------
; input a0.l ... Object data
; input a3.l ... Player data
; breaks: all but a0-a3
;****************************************************************************

DoBulletStuff:
    move.w  ObjectX(a0), d0             ; Check if we collide with the player
    move.w  PlayerX(a3), d1             ; (horizontal check)
    sub.w   #16, d1
    cmp.w   d1, d0
    ble.s   @DontKill
    add.w   #32, d1
    cmp.w   d1, d0
    bge.s   @DontKill
    
    move.w  ObjectY(a0), d0             ; (vertical check)
    move.w  PlayerY(a3), d1
    sub.w   #16, d1
    cmp.w   d1, d0
    ble.s   @DontKill
    add.w   #32, d1
    cmp.w   d1, d0
    bge.s   @DontKill
    
    bsr     KillPlayer                  ; Kill the player :(
    
@DontKill:
    rts                                 ; End of subroutine

;****************************************************************************
; DrawBullet
; Draws a generic bullet
;----------------------------------------------------------------------------
; input a0.l ... Object data
; input a3.l ... Player data
; breaks: all but a0-a3
;****************************************************************************

DrawBullet:
    move.w  ObjectX(a0), d0             ; Retrieve sprite coordinates
    move.w  ObjectY(a0), d1
    add.w   #$80-4, d0
    add.w   #$80-4, d1
    
    move.w  (RAM_BulletSprite), d2      ; Add bullet sprite
    moveq   #%0000, d3
    bsr     AddSprite
    
    rts                                 ; End of subroutine
